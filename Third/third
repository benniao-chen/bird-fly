Js变量特性：
    对象变量类型是引用类型
    Array/JSON/Object

    var a = [1, 2];
    var b = [1, 2];
    a == b => false;
    var c = b;
    c[0] = 2;
    b[0] = ?;

    浅拷贝：
        引用，可以理解为指针指向
    深拷贝：
        简单的Object对象JSON，JSON.stringify(), JSON.parse()
        复杂的对象，带function的 
                                object.assign()
                                angular.extend()

npm:
    前端包管理，基于node技术，所有的包都放在node_module文件夹中.
    安装npm：
        node官网安装node
        node -v npm -v
    初始化：
        npm init
    安装相应组件：
        npm install --save
                    --save-dev

angular: 
    学习网站：
        https://www.angular.cn/docs
        https://segmentfault.com/a/1190000008754631
    AngularCLI:
        npm install -g @angular/cli
    新建项目：
        ng new my-angular-projectng 
        ng generate component my-comp - 生成一个新组件，同时生成其测试规格和相应的HTML/CSS文件
        ng generate directive my-directive - 生成一个新指令
        ng generate pipe my-pipe - 生成一个新管道
        ng generate service my-service - 生成一个新服务
        ng generate route my-route - 生成一个新路由
        ng generate class my-class - 生成一个简易的模型类
    配置文件介绍：
        package.json: 
            dependencies, devDependencies

        tsconfig.json:
            用来配置解析ts文件
            https://www.tslang.cn/docs/handbook/tsconfig-json.html
            
            脱离了angular项目框架如何单独使用typescript?

        angular.json:
            angular项目的配置文件。
        
        结构顺序：
            main.ts
            index.html
    angular：
        zone.js ==> ngZone 检测js变量变化，刷新DOM，实现双向绑定
            setInterval、clearInterval、setTimeout、clearTimeout
            alert、prompt、confirm
            requestAnimationFrame、cancelAnimationFrame
            addEventListener、removeEventListener
            Angular 内部是通过它来跟踪异步任务，然后执行变化检测任务就可以了
        rxjs ==> js事件流
            EventEmitter
            Subject
            Subscription
            BehaviorSubject

        lifeCycle: 
            constructor:
                初始化调用
                一次调用
                服务注入

            ngOnChanges:
                组件输入变量变化
                多次调用
                父组件给子组件传值时用来检测输入值变化，常与Input一起使用
            ngOnInit:
                初始化调用
                一次调用
                组件变量初始化
            ngDoCheck:
                默认检测调用
                多次调用
                频率最快的检测，尽量不要使用
                ngAfterContentInit
                ngAfterContentChecked
                ngAfterViewInit
                ngAfterViewChecked
            ngOnDestroy:
                组件注销时调用
                组件注销：
                    ngIf销毁(hidden不销毁组件)
                    路由销毁
                一次调用
                常用来停止rxjs对象，清理定时器等

            Error:
                ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. 
                Previous value: 'false'. Current value: 'true'. 

        module:
            declarations: 本Module的component
            imports：     导入其余Module
            providers：   本module所包含的service服务
            bootstrap：   启动模块
        route:
            路由管理
            lazyload
        component:  (标签)
        directive:  (标签属性)
        pipe：      (过滤器)
        service:    (服务)
        class:      (功能类)

        model: 
            后台使用swagger进行开发，/swagger-ui.html用来查看api信息，/v2/api-docs可以交给前台生成model类型文件。

            https://cxa-profile-cxa-d0.osc1.ct1.cathaypacific.com/swagger-ui.html#/
            https://cxa-profile-cxa-d0.osc1.ct1.cathaypacific.com/v2/api-docs 

        命令：
            {{}}   ===  [ngModel]
            事件： ()
                (click), (focus)
            变量绑定: [] 
                [style], [attr], [disabled]
                [style.width], [attr.disabled]

            [(ngModel)]    ===  [ngModel] + (ngModelChange)

            属性型指令：
                [hidden]
                    原理是display属性

            结构型指令： 每个宿主元素上只能有一个结构型指令
                *ngIf (https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts)
                    remove DOM

                    <div class="name" *ngIf="hero">{{hero.name}}</div>
                    ====> 
                    <ng-template [ngIf]="hero">
                        <div class="name">{{hero.name}}</div>
                    </ng-template>
                    同时使用两个结构性命令，会报错，若不想多一个DOM元素，可采用解析后的写法。或使用(ng-container)
                
                *ngFor (https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_for_of.ts)
                    遍历使用
                    <div *ngFor="let hero of heroes; let i=index; let odd=odd; trackBy: trackById" [class.odd]="odd">
                        ({{i}}) {{hero.name}}
                    </div>
                    ====>
                    <ng-template ngFor let-hero [ngForOf]="heroes" let-i="index" let-odd="odd" [ngForTrackBy]="trackById">
                        <div [class.odd]="odd">({{i}}) {{hero.name}}</div>
                    </ng-template>

                *ngSwitch
                    *ngSwitchCase
                    *ngSwitchDefault
            
            模板引用变量
                #

        组件交互：
            父 ===> 子    []
            子 ===> 父    ()
            隔了几层的父子   公用的service
        

        组件样式：
            可使用@import语法引用其他css
            外部以及全局样式文件： angular.json styles中配置
            angular CLI： https://github.com/angular/angular-cli/wiki/stories
            了解： 视图的封装模式，默认是仿真模式（Emulated）

        
        

        

